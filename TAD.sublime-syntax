%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - tad
scope: source.tad

variables:
  TAD_keyword: (?i)(?:g[ée]neros|usa|importa|exporta|par[aá]metros formales|igualdad observacional|igobs|ig obs|observadores b[áa]sicos|obs|generadores|gen|otras operaciones|otras op|otrasop|axiomas)
  identifier: \b[[:alpha:]_][[:alnum:]_₁₂₃₄₅₆₇₈₉₀]*\b
  function_arrow: '(?:->|→)'
  function_call_name: '[^⟨\{\|¬∙[:space:]\(\)]+?'


contexts:
  prototype:
    - include: comments

  main:
    - include: TAD-definition
    - include: function-signatures
    - include: expressions

  type-name: # Matches a single typename
    - match: '({{identifier}})(\()'
      captures:
        1: entity.name.class.tad
        2: punctuation.section.parens.begin.tad
      set:
        - include: type-list
        - match: \)
          scope: punctuation.section.parens.end.tad
          pop: true
    - match: '{{identifier}}'
      scope: entity.name.class.tad
      pop: true

  type-list:
    - match: (?={{identifier}})
      push:
        - include: type-name
    - match: \,
      scope: punctuation.separator.comma.tad

  function-signatures:
    - match: '(.+?)\:(?=.*?{{function_arrow}})'
      captures:
        1: storage.type.function.tad
      push: [type-name, function-signature-inputs]
    - include: restrictions

  function-signature-inputs:
    - match: (?={{identifier}})
      push:
        - include: type-name
    - match: (×|x)
      scope: variable.parameter.tad
    - match: '{{function_arrow}}'
      scope: variable.parameter.tad
      pop: true


  restrictions:
    - match: '\{'
      scope: punctuation.section.braces.begin.tad
      push: restriction-inside

  restriction-inside:
    - match: \}
      scope: punctuation.section.braces.end.tad
      pop: true
    - include: expressions

  expressions:
    - include: eq-obs
    - include: quantifiers
    - include: function-calls
    - include: operators
    - include: strings
    - include: constants
    - include: conditionals
    - include: variables

  eq-obs:
    - match: (?i)\=obs
      scope: keyword.operator.comparison.tad

  quantifiers:
    - match: '(\()(∀|∃)(?=.+?\:)'
      captures:
        1: punctuation.section.parens.begin.tad
        2: keyword.operator.tad
      push:
        - match: '\:'
          scope: punctuation.separator.tad
          set:
            - match: (?={{identifier}})
              push: type-name
            - match: '\)'
              scope: punctuation.section.parens.end.tad
              pop: true
        - include: variables
        - match: '\,'
          scope: punctuation.separator.tad


  function-calls:
    - match: '({{function_call_name}})(?=\(.*?\))'
      captures:
        1: storage.type.function.tad

  operators:
    - match: (∙|∘|\+|\-|\*|\/|\^|≤|≥|∪|∩|&|∈|⊂|⊃|⊆|⊇|←|∧L?|∨L?|¬|:|∄|⇒L?|=>L?|⇐|<=|\[|\]|\=|↔|⇔|≡|<=>|⇐⇒|→|<|>)
      scope: keyword.operator.tad

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.tad
      push: inside-string

  inside-string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.tad
    - match: \\.
      scope: constant.character.escape.tad
    - match: '"'
      scope: punctuation.definition.string.end.tad
      pop: true

  constants:
    - match: (?:\s)((?:-)?\d+(?:\.\d*)?)(?=\s)
      captures:
        1: constant.numeric.tad
    - match: (?i)\b(true|false|none|∅|Ø|nil|<>)(?=\b)
      scope: constant.other.tad

  conditionals:
    - match: \b(if|else|then|fi|elif)(?=\b)
      scope: keyword.control.conditional.tad

  variables:
    - match: '{{identifier}}'
      scope: variable.tad

  TAD-definition:
    - match: (?i)\b(TAD) (?={{identifier}})\b
      captures:
        1: keyword.declaration.class.tad
      set: [TAD-definition-after, type-name]


  TAD-definition-after:
    - match: (?i)\b(ES) (?={{identifier}})\b
      captures:
        1: keyword.declaration.class.tad
      set: type-name
    - match: (?i)\b(EXTIENDE) (?={{identifier}})\b
      captures:
        1: keyword.declaration.class.tad
      push: type-name
    - match: (?=[\n:])
      set:
        - include: TAD-body
        - match: (?i)\b(FIN TAD)\b
          scope: keyword.declaration.class.tad
          pop: true

  TAD-body:
    - match: (?i)\bg[eé]neros:?\b
      scope: keyword.other.tad
      push: TAD-type-section
    - match: (?i)\baxiomas:?\b
      scope: keyword.other.tad
      push: TAD-expression-section
    - match: (?i)\busa:?\b
      scope: keyword.other.tad
      push: TAD-type-section
    - match: (?i)\bexporta:?\b
      scope: keyword.other.tad
      push: TAD-type-section
    - match: (?i)\bgeneradores:?\b
      scope: keyword.other.tad
      push: TAD-signature-section
    - match: (?i)\observadores b[aá]sicos:?\b
      scope: keyword.other.tad
      push: TAD-signature-section
    - match: (?i)\botras operaciones:?\b
      scope: keyword.other.tad
      push: TAD-signature-section
    - match: (?i)\bigualdad observacional:?\b
      scope: keyword.other.tad
      push: TAD-expression-section

  TAD-section:
    - match: \b(?={{TAD_keyword}})\b
      pop: true
    - match: (?i)\b(?=FIN TAD)\b
      pop: true

  TAD-type-section:
    - include: TAD-section
    - include: type-list

  TAD-signature-section:
    - include: TAD-section
    - include: function-signatures

  TAD-expression-section:
    - include: TAD-section
    - include: expressions

  comments:
    - match: --
      scope: punctuation.definition.comment.tad
      push:
        - meta_scope: comment.line.double-dash.tad
        - match: $\n?
          pop: true
    - match: //
      scope: punctuation.definition.comment.tad
      push:
        - meta_scope: comment.line.double-slash.tad
        - match: $\n?
          pop: true
